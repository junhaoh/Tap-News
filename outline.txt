front-end react client with NewsPanel and NewsCard
node.js and express server

backend_server rpc_client
utils => mongodb_client
mongod --dbpath ~/Downloads/Projects/mongodb
mongo --host 127.0.0.1:27017

cloudAMQP
pika
install => sudo pip install -r requirement.txt

cookie
Browser sends a HTTP GET request
Server sends a HTTP GET response with Set-Cookie(key-valued pair, timeout, session token)
Browser sends the cookie to server
client-session is a connect middleware that implements sessions in encrypted cookies
use sha1/sha256 to encrypt the password; add salt server side generated 

login page render login form, passing onChange to login form
signup page => signup form, adding confirm password

mongo schema user(email, password)
local login and signup password, apply middleware with jwt checker

web scraping and applications 
=> HTML parsing and extraction
XPath, beautiful soup 
regex ^beginning; $ending; .any single character
=> simple python scraper
requests, lxml, re, pymongo
=> integration with RabbitMQ
store scraping tasks temporarily, make scraper running continuously
let scraper feed itself, coordinate multiple scrapers working together
=> avoid blocking

news pipeline
=> news monitor
create common file -> news_api_client.py
getNewsFromSource(source, sortBy)
single news structure: source, url, title, description, publishedAt, urlToImage, digest(MD5 hash)
-> news_monitor.py
use Redis(little memory, fast speed, check duplicates) to check if the news has been processed
news_digest MD5 hash title string, check if it is in Redis,
if not, save news_digest to redis, set expire time, send to scraper queue,
set sleep time, call CloudAMQPClient


 => news fetcher => news deduper

